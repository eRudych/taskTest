buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
        classpath("org.jooq:jooq-codegen:3.11.12")
        classpath("mysql:mysql-connector-java:8.0.17")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    compile 'org.jooq:jooq:3.11.12'
    compile 'junit:junit:4.12'
    compile group: 'org.modelmapper', name: 'modelmapper', version: '2.3.2'
    compile group: 'org.mockito', name: 'mockito-core', version: '2.1.0'
    compile group: 'com.github.kstyrc', name: 'embedded-redis', version: '0.6'
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

// Use your favourite XML builder to construct the code generation configuration file
// ----------------------------------------------------------------------------------
def writer = new StringWriter()
def xml = new groovy.xml.MarkupBuilder(writer).configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
    jdbc() {
        driver('com.mysql.cj.jdbc.Driver')
        url('jdbc:mysql://localhost:3307/automobiles?createDatabaseIfNotExist=true')
        user('root')
        password('root')
    }
    generator() {
        database() {

            includes ('auto')

        }


            // Watch out for this caveat when using MarkupBuilder with "reserved names"
            // - https://github.com/jOOQ/jOOQ/issues/4797
            // - http://stackoverflow.com/a/11389034/521799
            // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
            generate([:]) {

            }
            target() {
                packageName('com.example.demo.db')
                directory('src/main/java')
            }
        }
    }


// Run the code generator
// ----------------------
org.jooq.codegen.GenerationTool.generate(writer.toString());
